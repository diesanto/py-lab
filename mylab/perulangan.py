# -*- coding: utf-8 -*-
"""Perulangan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tKhzf6gl-hqxgTRMZVjCK3nHWPvjgRn_

# While Loop
Sruktur perulangan dari while adalah sebagai berikut :


```
# while loop
while syarat:
  kondisi...
  kondisi....
```
Perhatikan contoh berikut ini : nilai n dimulai dari satu, selama n lebih kecil sama dengan tiga program akan mencetak 'I Love Python'.
"""

n = 1
while n <= 3:
  print('I Love Python')
  n = n + 1

"""Program berikut akan melakukan pemilihan bilangan terbesar dari beberapa bilangan yang diinputkan. Program akan terus meminta inputan dan berhenti jika diinputkan angka -1. Selanjutnya program akan menampilkan bilangan terbesar dari semua bilangan yang sudah diinputkan."""

# Masukan sebuah bilangan
number = int(input("Enter a number or type -1 to stop: "))

# Untuk perbandingan deklarasikan largest_number sama dengan number
largest_number = number

# Jika number bukan -1, jalankan kondisi
while number != -1:
    # Apakah number lebih besar dari largest_number?
    if number > largest_number:
        # Ya, update largest_number
        largest_number = number
    # Masukan sebuah bilangan
    number = int(input("Enter a number or type -1 to stop: "))

# Cetak bilangan terbesar
print("The largest number is:", largest_number)

"""Perulangan juga dapat dihentikan dengan menggunakan statment **Break**."""

# Masukan sebuah bilangan
number = int(input("Enter a number or type -1 to stop: "))

# Untuk perbandingan deklarasikan largest_number sama dengan number
largest_number = number

# Kondisi akan selalu dijalankan
while True:
    # Jika number sama dengan -1 hentikan perulangan
    if number == -1:
      break
    # Apakah number lebih besar dari largest_number?
    if number > largest_number:
        # Ya, update largest_number
        largest_number = number
    # Masukan sebuah bilangan
    number = int(input("Enter a number or type -1 to stop: "))

# Cetak bilangan terbesar
print("The largest number is:", largest_number)

"""Perulangan dapat mengabaikan suatu kondisi tertentu dengan menerapkan statment **continue**. Kita akan memodifikasi program sehingga hanya akan membandingan bilangan ganjil saja. Jika diinputkan bilangan genap, program mengabaikan bilangan tersebut."""

# we will store the current largest number here
largest_number = -999999999

# Jika number bukan -1, jalankan kondisi
while number != -1:
    # Masukan sebuah bilangan
    number = int(input("Enter a number or type -1 to stop: "))
    # Jika sisa bagi number sama dengan 0, lanjutkan perulangan
    if number % 2 == 0:
        continue
    # Apakah number lebih besar dari largest_number?
    if number > largest_number:
        # Ya, update largest_number
        largest_number = number

# Cetak bilangan terbesar
print("The largest number is:", largest_number)

"""**While - Else** digunakan untuk menangani kondisi **False** dalam perulangan. Skema nya adalah sebagai berikut.
```
# while loop
while syarat:
  kondisi1
else:
  kondisi2
```
"""

i = 5
while i < 5:
    print(i)
    i += 1
else:
    print("else:", i)

# Masukan sebuah bilangan
number = int(input("Enter a number or type -1 to stop: "))

# Untuk perbandingan deklarasikan largest_number sama dengan number
largest_number = number

# Jika number bukan -1, jalankan kondisi
while number != -1:
    # Apakah number lebih besar dari largest_number?
    if number > largest_number:
        # Ya, update largest_number
        largest_number = number
    # Masukan sebuah bilangan
    number = int(input("Enter a number or type -1 to stop: "))
else:
  # Cetak bilangan terbesar
  print("The largest number is:", largest_number)

"""# For Loop
Statment For hanya dapat digunakan untuk menyatakan perulangan yang kita sudah jelas mengetahui berapa jumlah perulangan tersebut. 


```
# For loop
for i in range (n):
  kondisi...
```

Perhatikan contoh berikut ini : kita akan mencetak kalimat 'I Love Python' sebanyak lima kali, setelah mencetak sebanyak lima kali program akan berhenti.
"""

for i in range (5):
  print('I Love Python')

"""Kita akan mencetak nilai dari 2 pangkat 0 hingga 15."""

pow = 1
for exp in range(16):
    print("2 to the power of", exp, "is", pow)
    pow *= 2

"""Selain itu kita juga dapat menentukan nilai awal dan jumlah perulangan dengan skema sebagai berikut ini.

```
# For loop
for i in range (a, n):
  kondisi...
```

Perulangan i akan dimulai dari a dan berhenti setelah (n - 1) kali. Perhatikan dua contoh perulangan berikut ini : untuk mencetak kalimat 'I Love Python' sebanyak lima kali, kita perlu memodifikasi program menjadi sebagai berikut.
"""

#nilai range dari 0 hingga 5
for i in range (0, 5):
  print('I Love Python ', i)

# atau nilai range dari 1 hingga 6
for i in range (1, 6):
  print('I Love Python', i)

"""Perulangan For juga mendukung **Step **dengan skema berikut ini.
```
# For loop
for i in range (a, n, step):
  kondisi...
```
Kita akan mencetak nilai dari 2 pangkat 0 hingga 15 tetapi hanya pangkat Genap saja.
"""

pow = 1
for exp in range(0, 16, 2):
    print("2 to the power of", exp, "is", pow)
    pow *= 2

"""Perulangan For juga mendukung **continue**. Berikut adalah cara lain **kita** mencetak nilai dari 2 pangkat 0 hingga 15 tetapi hanya pangkat Genap saja."""

pow = 1
for exp in range(1, 16):
    if exp % 2 == 0:
      continue
    print("2 to the power of", exp, "is", pow)
    pow *= 2

"""Perulangan For juga mendukung **break**. Berikut adalah cara lain **kita** menghentikan perulangan, syaratnya adalah jika nilai hasil pangkat sudah melebihi 100 maka perulangan di hentikan."""

pow = 1
for exp in range(16):
    if pow > 100:
      break
    print("2 to the power of", exp, "is", pow)
    pow *= 2

"""**For - Else** digunakan untuk menangani kondisi **False** dalam perulangan. Skema nya adalah sebagai berikut.
```
# For - Else loop
for i in range(a, n):
  kondisi1
else:
  kondisi2
```
"""

for i in range(5):
    print(i)
else:
    print("else:", i)

"""# LABORATORIUM
Contoh-contoh penerapan perulangan while - for - break dan continue.
"""

# break - example

print("The break instruction:")
for i in range(1, 6):
    if i == 3:
        break
    print("Inside the loop.", i)
print("Outside the loop.")


# continue - example

print("\nThe continue instruction:")
for i in range(1, 6):
    if i == 3:
        continue
    print("Inside the loop.", i)
print("Outside the loop.")

largestNumber = -99999999
counter = 0

while True:
    number = int(input("Enter a number or type -1 to end program: "))
    if number == -1:
        break
    counter += 1
    if number > largestNumber:
        largestNumber = number

if counter != 0:
    print("The largest number is", largestNumber)
else:
    print("You haven't entered any number.")

largestNumber = -99999999
counter = 0

number = int(input("Enter a number or type -1 to end program: "))

while number != -1:
    if number == -1:
        continue
    counter += 1

    if number > largestNumber:
        largestNumber = number
    number = int(input("Enter a number or type -1 to end program: "))

if counter:
    print("The largest number is", largestNumber)
else:
    print("You haven't entered any number.")

"""**LAB: The continue statement - the Ugly Vowel Eater**

**Scenario**

The continue statement is used to skip the current block and move ahead to the next iteration, without executing the statements inside the loop.

It can be used with both the while and for loops.

Your task here is very special: you must design a vowel eater! Write a program that uses:

a for loop;
the concept of conditional execution (if-elif-else)
the continue statement.
Your program must:

ask the user to enter a word;
use userWord = userWord.upper() to convert the word entered by the user to upper case; we'll talk about the so-called string methods and the upper() method very soon - don't worry;
use conditional execution and the continue statement to "eat" the following vowels A, E, I, O, U from the inputted word;
print the uneaten letters to the screen, each one of them on a separate line.
Test your program with the data we've provided for you.

**Test data**


---


Sample input: Gregory

Expected output:

G

R

G

R

Y


---


Sample input: abstemious

Expected output:

B

S

T

M

S
"""

# Prompt the user to enter a word
# and assign it to the userWord variable.

for letter in userWord:
    # Complete the body of the for loop.

"""**LAB: The continue statement - the Pretty Vowel Eater**

**Scenario**

Your task here is even more special than before: you must redesign the (ugly) vowel eater from the previous lab (3.1.2.10) and create a better, upgraded (pretty) vowel eater! Write a program that uses:

a for loop;
the concept of conditional execution (if-elif-else)
the continue statement.
Your program must:

ask the user to enter a word;
use userWord = userWord.upper() to convert the word entered by the user to upper case; we'll talk about the so-called string methods and the upper() method very soon - don't worry;
use conditional execution and the continue statement to "eat" the following vowels A, E, I, O, U from the inputted word;
assign the uneaten letters to the wordWithoutVovels variable and print the variable to the screen.
Look at the code in the editor. We've created wordWithoutVovels and assigned an empty string to it. Use concatenation operation to ask Python to combine selected letters into a longer string during subsequent loop turns, and assign it to the wordWithoutVovels variable.

Test your program with the data we've provided for you.


**Test data**


---


Sample input: Gregory

Expected output:

GRGRY



---


Sample input: abstemious

Expected output:

BSTMS

---


Sample input: IOUEA

Expected output:

????
"""

wordWithoutVovels = ""

# Prompt the user to enter a word
# and assign it to the userWord variable


for letter in userWord:
    # Complete the body of the loop.

# Print the word assigned to wordWithoutVowels.

"""**LAB: Essentials of the while loop**

**Scenario**

Listen to this story: a boy and his father, a computer programmer, are playing with wooden blocks. They are building a pyramid.

Their pyramid is a bit weird, as it is actually a pyramid-shaped wall - it's flat. The pyramid is stacked according to one simple principle: each lower layer contains one block more than the layer above.

The figure illustrates the rule used by the builders:

![alt text](https://drive.google.com/file/d/1_BshDvH2EiZH4STYWIYI25NZOGboYdEr/view)

Your task is to write a program which reads the number of blocks the builders have, and outputs the height of the pyramid that can be built using these blocks.

Note: the height is measured by the number of fully completed layers - if the builders don't have a sufficient number of blocks and cannot complete the next layer, they finish their work immediately.

Test your code using the data we've provided.


Test Data

Sample input: 6

Expected output: The height of the pyramid: 3

Sample input: 20

Expected output: The height of the pyramid: 5

Sample input: 1000

Expected output: The height of the pyramid: 44

Sample input: 2

Expected output: The height of the pyramid: 1
"""

blocks = int(input("Enter the number of blocks: "))

#
# Write your code here.
#	

print("The height of the pyramid:", height)

"""**LAB: Collatz's hypothesis**

**Scenario**

In 1937, a German mathematician named Lothar Collatz formulated an intriguing hypothesis (it still remains unproven) which can be described in the following way:

take any non-negative and non-zero integer number and name it c0;
if it's even, evaluate a new c0 as c0 ÷ 2;
otherwise, if it's odd, evaluate a new c0 as 3 × c0 + 1;
if c0 ≠ 1, skip to point 2.
The hypothesis says that regardless of the initial value of c0, it will always go to 1.

Of course, it's an extremely complex task to use a computer in order to prove the hypothesis for any natural number (it may even require artificial intelligence), but you can use Python to check some individual numbers. Maybe you'll even find the one which would disprove the hypothesis.


Write a program which reads one natural number and executes the above steps as long as c0 remains different from 1. We also want you to count the steps needed to achieve the goal. Your code should output all the intermediate values of c0, too.

Hint: the most important part of the problem is how to transform Collatz's idea into a while loop - this is the key to success.

Test your code using the data we've provided.

**Test Data**


---


Sample input: 15

Expected output:

46

23

70

35

106

53

160

80

40

20

10

5

16

8

4

2

1

steps = 17


---


Sample input: 16

Expected output:


8

4

2

1

steps = 4


---


Sample input: 1023

Expected output:

3070

1535

4606

2303

6910

3455

10366

5183

15550

7775

23326

11663

34990

17495

52486

26243

78730

39365

118096

59048

29524

14762

7381

22144

11072

5536

2768

1384

692

346

173

520

260

130

65

196

98

49

148

74

37

112

56

28

14

7

22

11

34

17

52

26

13

40

20

10


5


16

8

4

2

1
"""

